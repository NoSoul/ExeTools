#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int m_Band;
    float m_FDLLow;
    float m_NoffsDL;
    float m_NDLA;
    float m_NDLB;
    float m_FULLow;
    float m_NoffsUL;
    float m_NULA;
    float m_NULB;
} E_UTEA;
E_UTEA g_List[] = {
    1, 2110, 0, 0, 599, 1920, 18000, 18000, 18599,
    2, 1930, 600, 600, 1199, 1850, 18600, 18600, 19199,
    3, 1805, 1200, 1200, 1949, 1710, 19200, 19200, 19949,
    4, 2110, 1950, 1950, 2399, 1710, 19950, 19950, 20399,
    5, 869, 2400, 2400, 2649, 824, 20400, 20400, 20649,
    6, 875, 2650, 2650, 2749, 830, 20650, 20650, 20749,
    7, 2620, 2750, 2750, 3449, 2500, 20750, 20750, 21449,
    8, 925, 3450, 3450, 3799, 880, 21450, 21450, 21799,
    9, 1844.9, 3800, 3800, 4149, 1749.9, 21800, 21800, 22149,
    10, 2110, 4150, 4150, 4749, 1710, 22150, 22150, 22749,
    11, 1475.9, 4750, 4750, 4949, 1427.9, 22750, 22750, 22949,
    12, 729, 5010, 5010, 5179, 699, 23010, 23010, 23179,
    13, 746, 5180, 5180, 5279, 777, 23180, 23180, 23279,
    14, 758, 5280, 5280, 5379, 788, 23280, 23280, 23379,
    17, 734, 5730, 5730, 5849, 704, 23730, 23730, 23849,
    18, 860, 5850, 5850, 5999, 815, 23850, 23850, 23999,
    19, 875, 6000, 6000, 6149, 830, 24000, 24000, 24149,
    20, 791, 6150, 6150, 6449, 832, 24150, 24150, 24449,
    21, 1495.9, 6450, 6450, 6599, 1447.9, 24450, 24450, 24599,
    22, 3510, 6600, 6600, 7399, 3410, 24600, 24600, 25399,
    23, 2180, 7500, 7500, 7699, 2000, 25500, 25500, 25699,
    24, 1525, 7700, 7700, 8039, 1626.5, 25700, 25700, 26039,
    25, 1930, 8040, 8040, 8689, 1850, 26040, 26040, 26689,
    26, 859, 8690, 8690, 9039, 814, 26690, 26690, 27039,
    27, 852, 9040, 9040, 9209, 807, 27040, 27040, 27209,
    28, 758, 9210, 9210, 9659, 703, 27210, 27210, 27659,
    29, 717, 9660, 9660, 9769, 717, 9660, 9660, 9769,
    30, 2350, 9770, 9770, 9869, 2305, 27660, 27660, 27759,
    31, 462.5, 9870, 9870, 9919, 452.5, 27760, 27760, 27809,
    33, 1900, 36000, 36000, 36199, 1900, 36000, 36000, 36199,
    34, 2010, 36200, 36200, 36349, 2010, 36200, 36200, 36349,
    35, 1850, 36350, 36350, 36949, 1850, 36350, 36350, 36949,
    36, 1930, 36950, 36950, 37549, 1930, 36950, 36950, 37549,
    37, 1910, 37550, 37550, 37749, 1910, 37550, 37550, 37749,
    38, 2570, 37750, 37750, 38249, 2570, 37750, 37750, 38249,
    39, 1880, 38250, 38250, 38649, 1880, 38250, 38250, 38649,
    40, 2300, 38650, 38650, 39649, 2300, 38650, 38650, 39649,
    41, 2496, 39650, 39650, 41589, 2496, 39650, 39650, 41589,
    42, 3400, 41590, 41590, 43589, 3400, 41590, 41590, 43589,
    43, 3600, 43590, 43590, 45589, 3600, 43590, 43590, 45589,
    44, 703, 45590, 45590, 46589, 703, 45590, 45590, 46589,
};

int main(int argc, char *argv[])
{
    if(argc != 3) {
        printf("Usage: %s [-e] [-u] arfcn\n", argv[0]);
        return 1;
    }
    if(argv[1][0] != '-' || (argv[1][1] != 'e' && argv[1][1] != 'u')) {
        printf("Usage: %s [-e] [-u] arfcn\n", argv[0]);
        return 1;
    }
    float arfcn = atof(argv[2]);
    if(argv[1][1] == 'e') {
        for(unsigned i = 0; i < sizeof(g_List) / sizeof(E_UTEA); ++i) {
            bool find = false;
            float offset;
            if(arfcn >= g_List[i].m_NDLA && arfcn <= g_List[i].m_NDLB) {
                find = true;
                offset = arfcn - g_List[i].m_NDLA;
            } else if(arfcn >= g_List[i].m_NULA && arfcn <= g_List[i].m_NULB) {
                find = true;
                offset = arfcn - g_List[i].m_NULA;
            }
            if(find) {
                printf("Band %d DL: %.1f MHz UL: %.1f MHz\tEARFCN DL: %.0f EARFCN UL: %.0f\n", g_List[i].m_Band, g_List[i].m_FDLLow + 0.1 * offset, g_List[i].m_FULLow + 0.1 * offset, g_List[i].m_NDLA + offset, g_List[i].m_NULA + offset);
            }
        }
    } else {
        for(unsigned i = 0; i < sizeof(g_List) / sizeof(E_UTEA); ++i) {
            bool find = false;
            float offset;
            if(arfcn >= g_List[i].m_FDLLow && arfcn <= g_List[i].m_FDLLow + 0.1 * (g_List[i].m_NDLB - g_List[i].m_NDLA)) {
                find = true;
                offset = arfcn - g_List[i].m_FDLLow;
            } else if(arfcn >= g_List[i].m_FULLow && arfcn <= g_List[i].m_FULLow + 0.1 * (g_List[i].m_NULB - g_List[i].m_NULA)) {
                find = true;
                offset = arfcn - g_List[i].m_FULLow;
            }
            if(find) {
                printf("Band %d DL: %.1f MHz UL: %.1f MHz\tEARFCN DL: %.0f EARFCN UL: %.0f\n", g_List[i].m_Band, g_List[i].m_FDLLow + offset, g_List[i].m_FULLow + offset, g_List[i].m_NDLA + 10 * offset, g_List[i].m_NULA + 10 * offset);
            }
        }
    }
    return 0;
}
